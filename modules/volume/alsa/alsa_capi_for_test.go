// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by capi.rb; DO NOT EDIT.

package alsa

import "sync"

type alsaTester struct {
	mu                                             sync.Mutex
	mock_snd_mixer_attach                          func(*ctyp_snd_mixer_t, string) int32
	mock_snd_mixer_close                           func(*ctyp_snd_mixer_t) int32
	mock_snd_mixer_detach                          func(*ctyp_snd_mixer_t, string) int32
	mock_snd_mixer_find_selem                      func(*ctyp_snd_mixer_t, *ctyp_snd_mixer_selem_id_t) *ctyp_snd_mixer_elem_t
	mock_snd_mixer_free                            func(*ctyp_snd_mixer_t)
	mock_snd_mixer_handle_events                   func(*ctyp_snd_mixer_t) int32
	mock_snd_mixer_load                            func(*ctyp_snd_mixer_t) int32
	mock_snd_mixer_open                            func(**ctyp_snd_mixer_t, int32) int32
	mock_snd_mixer_selem_get_playback_switch       func(*ctyp_snd_mixer_elem_t, ctyp_snd_mixer_selem_channel_id_t, *int32) int32
	mock_snd_mixer_selem_get_playback_volume       func(*ctyp_snd_mixer_elem_t, ctyp_snd_mixer_selem_channel_id_t, *int64) int32
	mock_snd_mixer_selem_get_playback_volume_range func(*ctyp_snd_mixer_elem_t, *int64, *int64) int32
	mock_snd_mixer_selem_id_free                   func(*ctyp_snd_mixer_selem_id_t)
	mock_snd_mixer_selem_id_malloc                 func(**ctyp_snd_mixer_selem_id_t) int32
	mock_snd_mixer_selem_id_set_index              func(*ctyp_snd_mixer_selem_id_t, uint32)
	mock_snd_mixer_selem_id_set_name               func(*ctyp_snd_mixer_selem_id_t, string)
	mock_snd_mixer_selem_register                  func(*ctyp_snd_mixer_t, *ctyp_struct_snd_mixer_selem_regopt, **ctyp_snd_mixer_class_t) int32
	mock_snd_mixer_selem_set_playback_switch       func(*ctyp_snd_mixer_elem_t, ctyp_snd_mixer_selem_channel_id_t, int32) int32
	mock_snd_mixer_selem_set_playback_switch_all   func(*ctyp_snd_mixer_elem_t, int32) int32
	mock_snd_mixer_selem_set_playback_volume       func(*ctyp_snd_mixer_elem_t, ctyp_snd_mixer_selem_channel_id_t, int64) int32
	mock_snd_mixer_selem_set_playback_volume_all   func(*ctyp_snd_mixer_elem_t, int64) int32
	mock_snd_mixer_wait                            func(*ctyp_snd_mixer_t, int32) int32
}

func alsaTest() *alsaTester {
	tester := &alsaTester{}
	alsa = tester
	return tester
}

func (t *alsaTester) on_snd_mixer_attach(fn func(*ctyp_snd_mixer_t, string) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_attach = fn
	return t
}

func (t *alsaTester) snd_mixer_attach(arg_mixer *ctyp_snd_mixer_t, arg_name string) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_attach != nil {
		ret = t.mock_snd_mixer_attach(arg_mixer, arg_name)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_close(fn func(*ctyp_snd_mixer_t) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_close = fn
	return t
}

func (t *alsaTester) snd_mixer_close(arg_mixer *ctyp_snd_mixer_t) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_close != nil {
		ret = t.mock_snd_mixer_close(arg_mixer)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_detach(fn func(*ctyp_snd_mixer_t, string) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_detach = fn
	return t
}

func (t *alsaTester) snd_mixer_detach(arg_mixer *ctyp_snd_mixer_t, arg_name string) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_detach != nil {
		ret = t.mock_snd_mixer_detach(arg_mixer, arg_name)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_find_selem(fn func(*ctyp_snd_mixer_t, *ctyp_snd_mixer_selem_id_t) *ctyp_snd_mixer_elem_t) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_find_selem = fn
	return t
}

func (t *alsaTester) snd_mixer_find_selem(arg_mixer *ctyp_snd_mixer_t, arg_id *ctyp_snd_mixer_selem_id_t) *ctyp_snd_mixer_elem_t {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret *ctyp_snd_mixer_elem_t
	if t.mock_snd_mixer_find_selem != nil {
		ret = t.mock_snd_mixer_find_selem(arg_mixer, arg_id)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_free(fn func(*ctyp_snd_mixer_t)) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_free = fn
	return t
}

func (t *alsaTester) snd_mixer_free(arg_mixer *ctyp_snd_mixer_t) {
	t.mu.Lock()
	defer t.mu.Unlock()
	if t.mock_snd_mixer_free != nil {
		t.mock_snd_mixer_free(arg_mixer)
	}
}

func (t *alsaTester) on_snd_mixer_handle_events(fn func(*ctyp_snd_mixer_t) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_handle_events = fn
	return t
}

func (t *alsaTester) snd_mixer_handle_events(arg_mixer *ctyp_snd_mixer_t) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_handle_events != nil {
		ret = t.mock_snd_mixer_handle_events(arg_mixer)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_load(fn func(*ctyp_snd_mixer_t) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_load = fn
	return t
}

func (t *alsaTester) snd_mixer_load(arg_mixer *ctyp_snd_mixer_t) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_load != nil {
		ret = t.mock_snd_mixer_load(arg_mixer)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_open(fn func(**ctyp_snd_mixer_t, int32) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_open = fn
	return t
}

func (t *alsaTester) snd_mixer_open(arg_mixer **ctyp_snd_mixer_t, arg_mode int32) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_open != nil {
		ret = t.mock_snd_mixer_open(arg_mixer, arg_mode)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_get_playback_switch(fn func(*ctyp_snd_mixer_elem_t, ctyp_snd_mixer_selem_channel_id_t, *int32) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_get_playback_switch = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_get_playback_switch(arg_elem *ctyp_snd_mixer_elem_t, arg_channel ctyp_snd_mixer_selem_channel_id_t, arg_value *int32) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_get_playback_switch != nil {
		ret = t.mock_snd_mixer_selem_get_playback_switch(arg_elem, arg_channel, arg_value)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_get_playback_volume(fn func(*ctyp_snd_mixer_elem_t, ctyp_snd_mixer_selem_channel_id_t, *int64) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_get_playback_volume = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_get_playback_volume(arg_elem *ctyp_snd_mixer_elem_t, arg_channel ctyp_snd_mixer_selem_channel_id_t, arg_value *int64) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_get_playback_volume != nil {
		ret = t.mock_snd_mixer_selem_get_playback_volume(arg_elem, arg_channel, arg_value)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_get_playback_volume_range(fn func(*ctyp_snd_mixer_elem_t, *int64, *int64) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_get_playback_volume_range = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_get_playback_volume_range(arg_elem *ctyp_snd_mixer_elem_t, arg_min *int64, arg_max *int64) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_get_playback_volume_range != nil {
		ret = t.mock_snd_mixer_selem_get_playback_volume_range(arg_elem, arg_min, arg_max)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_id_free(fn func(*ctyp_snd_mixer_selem_id_t)) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_id_free = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_id_free(arg_obj *ctyp_snd_mixer_selem_id_t) {
	t.mu.Lock()
	defer t.mu.Unlock()
	if t.mock_snd_mixer_selem_id_free != nil {
		t.mock_snd_mixer_selem_id_free(arg_obj)
	}
}

func (t *alsaTester) on_snd_mixer_selem_id_malloc(fn func(**ctyp_snd_mixer_selem_id_t) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_id_malloc = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_id_malloc(arg_ptr **ctyp_snd_mixer_selem_id_t) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_id_malloc != nil {
		ret = t.mock_snd_mixer_selem_id_malloc(arg_ptr)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_id_set_index(fn func(*ctyp_snd_mixer_selem_id_t, uint32)) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_id_set_index = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_id_set_index(arg_obj *ctyp_snd_mixer_selem_id_t, arg_val uint32) {
	t.mu.Lock()
	defer t.mu.Unlock()
	if t.mock_snd_mixer_selem_id_set_index != nil {
		t.mock_snd_mixer_selem_id_set_index(arg_obj, arg_val)
	}
}

func (t *alsaTester) on_snd_mixer_selem_id_set_name(fn func(*ctyp_snd_mixer_selem_id_t, string)) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_id_set_name = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_id_set_name(arg_obj *ctyp_snd_mixer_selem_id_t, arg_val string) {
	t.mu.Lock()
	defer t.mu.Unlock()
	if t.mock_snd_mixer_selem_id_set_name != nil {
		t.mock_snd_mixer_selem_id_set_name(arg_obj, arg_val)
	}
}

func (t *alsaTester) on_snd_mixer_selem_register(fn func(*ctyp_snd_mixer_t, *ctyp_struct_snd_mixer_selem_regopt, **ctyp_snd_mixer_class_t) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_register = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_register(arg_mixer *ctyp_snd_mixer_t, arg_options *ctyp_struct_snd_mixer_selem_regopt, arg_classp **ctyp_snd_mixer_class_t) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_register != nil {
		ret = t.mock_snd_mixer_selem_register(arg_mixer, arg_options, arg_classp)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_set_playback_switch(fn func(*ctyp_snd_mixer_elem_t, ctyp_snd_mixer_selem_channel_id_t, int32) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_set_playback_switch = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_set_playback_switch(arg_elem *ctyp_snd_mixer_elem_t, arg_channel ctyp_snd_mixer_selem_channel_id_t, arg_value int32) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_set_playback_switch != nil {
		ret = t.mock_snd_mixer_selem_set_playback_switch(arg_elem, arg_channel, arg_value)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_set_playback_switch_all(fn func(*ctyp_snd_mixer_elem_t, int32) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_set_playback_switch_all = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_set_playback_switch_all(arg_elem *ctyp_snd_mixer_elem_t, arg_value int32) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_set_playback_switch_all != nil {
		ret = t.mock_snd_mixer_selem_set_playback_switch_all(arg_elem, arg_value)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_set_playback_volume(fn func(*ctyp_snd_mixer_elem_t, ctyp_snd_mixer_selem_channel_id_t, int64) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_set_playback_volume = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_set_playback_volume(arg_elem *ctyp_snd_mixer_elem_t, arg_channel ctyp_snd_mixer_selem_channel_id_t, arg_value int64) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_set_playback_volume != nil {
		ret = t.mock_snd_mixer_selem_set_playback_volume(arg_elem, arg_channel, arg_value)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_selem_set_playback_volume_all(fn func(*ctyp_snd_mixer_elem_t, int64) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_selem_set_playback_volume_all = fn
	return t
}

func (t *alsaTester) snd_mixer_selem_set_playback_volume_all(arg_elem *ctyp_snd_mixer_elem_t, arg_value int64) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_selem_set_playback_volume_all != nil {
		ret = t.mock_snd_mixer_selem_set_playback_volume_all(arg_elem, arg_value)
	}
	return ret
}

func (t *alsaTester) on_snd_mixer_wait(fn func(*ctyp_snd_mixer_t, int32) int32) *alsaTester {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.mock_snd_mixer_wait = fn
	return t
}

func (t *alsaTester) snd_mixer_wait(arg_mixer *ctyp_snd_mixer_t, arg_timeout int32) int32 {
	t.mu.Lock()
	defer t.mu.Unlock()
	var ret int32
	if t.mock_snd_mixer_wait != nil {
		ret = t.mock_snd_mixer_wait(arg_mixer, arg_timeout)
	}
	return ret
}
